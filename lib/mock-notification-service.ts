// Mock Notification Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
import { notifyTeams, loadNotifyTeams } from './mock-settings'
import { mockCustomers } from './mock-customers'
import { mockOrders } from './mock-orders'
import type { Customer } from './mock-customers'
export interface NotificationTemplate {
  id: string
  name: string
  type: "email" | "sms" | "line"
  subject?: string
  content: string
  variables: string[]
}

export interface NotificationData {
  type: "stock_low" | "stock_out" | "stock_critical" | "order_created" | "order_updated" | "system_alert"
  recipient: {
    email?: string
    phone?: string
    lineUserId?: string
    name?: string
  }
  data: Record<string, any>
  priority: "low" | "normal" | "high" | "urgent"
  scheduledAt?: Date
}

export interface NotificationHistory {
  id: string
  type: string
  channel: "email" | "sms" | "line"
  recipient: string
  subject?: string
  content: string
  status: "pending" | "sent" | "failed" | "delivered"
  error?: string
  sentAt?: string
  deliveredAt?: string
  createdAt: string
}

// Mock Email Service
class MockEmailService {
  async sendEmail(to: string, subject: string, html: string, text?: string): Promise<boolean> {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    console.log("üìß Mock Email Sent:", { to, subject })

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 95%
    return Math.random() > 0.05
  }
}

// Mock SMS Service
class MockSMSService {
  async sendSMS(to: string, message: string): Promise<boolean> {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS
    console.log("üì± Mock SMS Sent:", { to, message: message.substring(0, 50) + "..." })

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    await new Promise((resolve) => setTimeout(resolve, 800))

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 90%
    return Math.random() > 0.1
  }
}

// Mock Line Notify Service
class MockLineNotifyService {
  async sendLineNotify(message: string): Promise<boolean> {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Line Notify
    console.log("üí¨ Mock Line Notify Sent:", message.substring(0, 50) + "...")

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    await new Promise((resolve) => setTimeout(resolve, 600))

    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 98%
    return Math.random() > 0.02
  }
}

// Notification Templates
export const mockNotificationTemplates: Record<string, NotificationTemplate> = {
  stock_low_email: {
    id: "stock_low_email",
    name: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
    type: "email",
    subject: "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ - {{productName}}",
    content: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
          <h2 style="color: #dc3545; margin: 0 0 20px 0;">‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥</h2>
          
          <div style="background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="margin: 0 0 15px 0;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
            <table style="width: 100%; border-collapse: collapse;">
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</td>
                <td style="padding: 8px 0;">{{productName}}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</td>
                <td style="padding: 8px 0;">{{productId}}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</td>
                <td style="padding: 8px 0; color: #dc3545; font-weight: bold;">{{currentStock}} ‡∏ä‡∏¥‡πâ‡∏ô</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:</td>
                <td style="padding: 8px 0;">{{minStock}} ‡∏ä‡∏¥‡πâ‡∏ô</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</td>
                <td style="padding: 8px 0;">{{location}}</td>
              </tr>
            </table>
          </div>
          
          <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <p style="margin: 0; color: #856404;">
              <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡∏ô
            </p>
          </div>
          
          <div style="text-align: center;">
            <a href="{{dashboardUrl}}" style="background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡πá‡∏≠‡∏Å
            </a>
          </div>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #dee2e6;">
          <p style="text-align: center; color: #6c757d; font-size: 14px; margin: 0;">
            ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - Sofa Cover Store<br>
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {{timestamp}}
          </p>
        </div>
      </div>
    `,
    variables: ["productName", "productId", "currentStock", "minStock", "location", "dashboardUrl", "timestamp"],
  },

  stock_out_email: {
    id: "stock_out_email",
    name: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
    type: "email",
    subject: "üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å - {{productName}}",
    content: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
          <h2 style="color: #dc3545; margin: 0 0 20px 0;">üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å</h2>
          
          <div style="background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="margin: 0 0 15px 0;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
            <table style="width: 100%; border-collapse: collapse;">
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</td>
                <td style="padding: 8px 0;">{{productName}}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</td>
                <td style="padding: 8px 0;">{{productId}}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</td>
                <td style="padding: 8px 0; color: #dc3545; font-weight: bold;">0 ‡∏ä‡∏¥‡πâ‡∏ô</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</td>
                <td style="padding: 8px 0;">{{location}}</td>
              </tr>
            </table>
          </div>
          
          <div style="background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <p style="margin: 0; color: #721c24;">
              <strong>‚ö†Ô∏è ‡∏î‡πà‡∏ß‡∏ô:</strong> ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            </p>
          </div>
          
          <div style="text-align: center;">
            <a href="{{dashboardUrl}}" style="background: #dc3545; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å
            </a>
          </div>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #dee2e6;">
          <p style="text-align: center; color: #6c757d; font-size: 14px; margin: 0;">
            ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - Sofa Cover Store<br>
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {{timestamp}}
          </p>
        </div>
      </div>
    `,
    variables: ["productName", "productId", "location", "dashboardUrl", "timestamp"],
  },

  stock_low_sms: {
    id: "stock_low_sms",
    name: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ - SMS",
    type: "sms",
    content:
      "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥\n{{productName}} ({{productId}})\n‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {{currentStock}} ‡∏ä‡∏¥‡πâ‡∏ô\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: {{minStock}} ‡∏ä‡∏¥‡πâ‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
    variables: ["productName", "productId", "currentStock", "minStock"],
  },

  stock_out_sms: {
    id: "stock_out_sms",
    name: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å - SMS",
    type: "sms",
    content: "üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å\n{{productName}} ({{productId}})\n‡∏™‡∏ï‡πá‡∏≠‡∏Å: 0 ‡∏ä‡∏¥‡πâ‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏î‡πà‡∏ß‡∏ô!",
    variables: ["productName", "productId"],
  },

  stock_low_line: {
    id: "stock_low_line",
    name: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥ - Line",
    type: "line",
    content: `‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥

üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {{productName}}
üè∑Ô∏è ‡∏£‡∏´‡∏±‡∏™: {{productId}}
üìä ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {{currentStock}} ‡∏ä‡∏¥‡πâ‡∏ô
üìâ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: {{minStock}} ‡∏ä‡∏¥‡πâ‡∏ô
üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {{location}}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å`,
    variables: ["productName", "productId", "currentStock", "minStock", "location"],
  },

  stock_out_line: {
    id: "stock_out_line",
    name: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å - Line",
    type: "line",
    content: `üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å

üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {{productName}}
üè∑Ô∏è ‡∏£‡∏´‡∏±‡∏™: {{productId}}
üìä ‡∏™‡∏ï‡πá‡∏≠‡∏Å: 0 ‡∏ä‡∏¥‡πâ‡∏ô
üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {{location}}

‚ö†Ô∏è ‡∏î‡πà‡∏ß‡∏ô: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!`,
    variables: ["productName", "productId", "location"],
  },

  order_created_email: {
    id: "order_created_email",
    name: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
    type: "email",
    subject: "üõçÔ∏è ‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà - #{{orderId}}",
    content: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
          <h2 style="color: #28a745; margin: 0 0 20px 0;">üõçÔ∏è ‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà</h2>
          
          <div style="background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="margin: 0 0 15px 0;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</h3>
            <table style="width: 100%; border-collapse: collapse;">
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:</td>
                <td style="padding: 8px 0;">#{{orderId}}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</td>
                <td style="padding: 8px 0;">{{customerName}}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</td>
                <td style="padding: 8px 0; color: #28a745; font-weight: bold;">{{totalAmount}} ‡∏ö‡∏≤‡∏ó</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; font-weight: bold;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</td>
                <td style="padding: 8px 0;">{{itemCount}} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</td>
              </tr>
            </table>
          </div>
          
          <div style="text-align: center;">
            <a href="{{orderUrl}}" style="background: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            </a>
          </div>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #dee2e6;">
          <p style="text-align: center; color: #6c757d; font-size: 14px; margin: 0;">
            ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - Sofa Cover Store<br>
            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {{timestamp}}
          </p>
        </div>
      </div>
    `,
    variables: ["orderId", "customerName", "totalAmount", "itemCount", "orderUrl", "timestamp"],
  },
}

// Mock Notification Service
export class MockNotificationService {
  private emailService: MockEmailService
  private smsService: MockSMSService
  private lineService: MockLineNotifyService
  private history: NotificationHistory[] = []

  constructor() {
    this.emailService = new MockEmailService()
    this.smsService = new MockSMSService()
    this.lineService = new MockLineNotifyService()

    // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å localStorage
    this.loadHistory()
    loadNotifyTeams()
  }

  private loadHistory(): void {
    if (typeof window !== "undefined") {
      const saved = localStorage.getItem("mockNotificationHistory")
      if (saved) {
        this.history = JSON.parse(saved)
      }
    }
  }

  private saveHistory(): void {
    if (typeof window !== "undefined") {
      localStorage.setItem("mockNotificationHistory", JSON.stringify(this.history))
    }
  }

  private replaceVariables(template: string, data: Record<string, any>): string {
    let result = template
    Object.keys(data).forEach((key) => {
      const regex = new RegExp(`{{${key}}}`, "g")
      result = result.replace(regex, data[key] || "")
    })
    return result
  }

  private async addToHistory(
    type: string,
    channel: "email" | "sms" | "line",
    recipient: string,
    subject: string | undefined,
    content: string,
    status: "sent" | "failed",
    error?: string,
  ): Promise<void> {
    const historyItem: NotificationHistory = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      type,
      channel,
      recipient,
      subject,
      content,
      status,
      error,
      sentAt: status === "sent" ? new Date().toISOString() : undefined,
      createdAt: new Date().toISOString(),
    }

    this.history.unshift(historyItem)

    // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 500 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (this.history.length > 500) {
      this.history = this.history.slice(0, 500)
    }

    this.saveHistory()
  }

  async sendNotification(notificationData: NotificationData): Promise<boolean> {
    const { type, recipient, data, priority } = notificationData
    let customer: Customer | undefined
    if ((data as any).orderId) {
      const order = mockOrders.find((o) => o.id === (data as any).orderId)
      if (order) {
        customer = mockCustomers.find((c) => c.id === order.customerId)
      }
    }
    if (!customer && recipient.email) {
      customer = mockCustomers.find((c) => c.email === recipient.email)
    }
    if (!customer && recipient.phone) {
      customer = mockCustomers.find((c) => c.phone === recipient.phone)
    }
    if (customer?.muted) {
      return false
    }
    const teamMap: Record<NotificationData['type'], keyof typeof notifyTeams> = {
      stock_low: 'packing',
      stock_out: 'packing',
      stock_critical: 'packing',
      order_created: 'packing',
      order_updated: 'packing',
      system_alert: 'finance',
    }
    const team = teamMap[type]
    if (team && !notifyTeams[team]) {
      return true
    }
    let success = false

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    const commonData = {
      ...data,
      timestamp: new Date().toLocaleString("th-TH"),
      dashboardUrl: "/admin/inventory",
      orderUrl: data.orderId ? `/admin/orders/manual/edit/${data.orderId}` : "/admin/orders",
    }

    try {
      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      if (recipient.email) {
        const emailTemplate = mockNotificationTemplates[`${type}_email`]
        if (emailTemplate) {
          const subject = this.replaceVariables(emailTemplate.subject || "", commonData)
          const content = this.replaceVariables(emailTemplate.content, commonData)

          const emailSent = await this.emailService.sendEmail(recipient.email, subject, content)
          await this.addToHistory(type, "email", recipient.email, subject, content, emailSent ? "sent" : "failed")

          if (emailSent) success = true
        }
      }

      // ‡∏™‡πà‡∏á SMS
      if (recipient.phone) {
        const smsTemplate = mockNotificationTemplates[`${type}_sms`]
        if (smsTemplate) {
          const content = this.replaceVariables(smsTemplate.content, commonData)

          const smsSent = await this.smsService.sendSMS(recipient.phone, content)
          await this.addToHistory(type, "sms", recipient.phone, undefined, content, smsSent ? "sent" : "failed")

          if (smsSent) success = true
        }
      }

      // ‡∏™‡πà‡∏á Line Notify
      const lineTemplate = mockNotificationTemplates[`${type}_line`]
      if (lineTemplate) {
        const content = this.replaceVariables(lineTemplate.content, commonData)

        const lineSent = await this.lineService.sendLineNotify(content)
        await this.addToHistory(type, "line", "Line Group", undefined, content, lineSent ? "sent" : "failed")

        if (lineSent) success = true
      }

      return success
    } catch (error) {
      console.error("Mock notification send error:", error)
      return false
    }
  }

  getHistory(): NotificationHistory[] {
    return this.history
  }

  getTemplates(): NotificationTemplate[] {
    return Object.values(mockNotificationTemplates)
  }

  clearHistory(): void {
    this.history = []
    this.saveHistory()
  }

  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  async sendBulkNotifications(notifications: NotificationData[]): Promise<{ success: number; failed: number }> {
    let success = 0
    let failed = 0

    for (const notification of notifications) {
      const result = await this.sendNotification(notification)
      if (result) {
        success++
      } else {
        failed++
      }
    }

    return { success, failed }
  }
}

// Export singleton instance
export const mockNotificationService = new MockNotificationService()
